(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";
var Helper_1 = require('./Helper');
var CellController = (function () {
    function CellController(cell, x, y) {
        this.isAlive = false;
        this.cell = cell;
        this.x = x;
        this.y = y;
    }
    CellController.prototype.watchNeighbors = function () {
        var alives = 0;
        var deads = 0;
        var around = Helper_1.Helper.getNeighbors(this.x, this.y);
        for (var _i = 0, around_1 = around; _i < around_1.length; _i++) {
            var pos = around_1[_i];
            var neighbor = document.getElementById(pos[0] + "," + pos[1]);
            if (neighbor != undefined) {
                if (neighbor.classList.contains('alive'))
                    alives++;
                if (neighbor.classList.contains('dead'))
                    deads++;
            }
        }
        this.rules(alives, deads);
    };
    CellController.prototype.rules = function (alives, deads) {
        this.change = this.noChnage;
        if (this.isAlive && alives < 2)
            this.change = this.dies;
        if (this.isAlive && alives > 3)
            this.change = this.dies;
        // 2 or 3 alives, lives unchanged
        if (!this.isAlive && alives == 3)
            this.change = this.lives;
    };
    CellController.prototype.commitChnage = function () {
        this.change();
        Helper_1.Helper.printCell(this);
    };
    CellController.prototype.noChnage = function () { };
    CellController.prototype.lives = function () {
        this.cell.classList.remove('dead');
        this.cell.classList.add('alive');
        this.isAlive = true;
    };
    CellController.prototype.dies = function () {
        this.cell.classList.remove('alive');
        this.cell.classList.add('dead');
        this.isAlive = false;
    };
    return CellController;
}());
exports.CellController = CellController;

},{"./Helper":2}],2:[function(require,module,exports){
"use strict";
exports.Helper = {
    getNeighbors: function (x, y) {
        return [
            [x - 1, y - 1],
            [x - 1, y],
            [x - 1, y + 1],
            [x, y - 1],
            // [x, y],
            [x, y + 1],
            [x + 1, y - 1],
            [x + 1, y],
            [x + 1, y + 1],
        ];
    },
    printCell: function (cell) {
        var alives = document.getElementById('print-alives');
        if (cell.isAlive)
            alives.innerHTML += cell.x + ", " + cell.y + " <br>";
    }
};

},{}],3:[function(require,module,exports){
"use strict";
var CellController_1 = require('../cell/CellController');
var GridController = (function () {
    function GridController(id) {
        this.containerElem = document.getElementById(id);
        this.fillGridDone = new CustomEvent('fill-grid-done');
        this.size = 20; //make it more dynamic?
        this.grid = [];
        while (this.grid.push([]) < this.size)
            ;
    }
    GridController.prototype.getCell = function (x, y) {
        return this.grid[x][y];
    };
    GridController.prototype.fillGrid = function (callback) {
        this.containerElem.innerHTML = '';
        document.addEventListener('fill-grid-done', function (e) {
            callback();
        });
        for (var x in this.grid) {
            for (var y in this.grid) {
                this.createNewElement(Number(x), Number(y));
            }
        }
    };
    GridController.prototype.tick = function () {
        for (var x in this.grid) {
            for (var y in this.grid) {
                this.grid[x][y].watchNeighbors();
            }
        }
        for (var x in this.grid) {
            for (var y in this.grid) {
                this.grid[x][y].commitChnage();
            }
        }
    };
    GridController.prototype.createNewElement = function (x, y) {
        var _this = this;
        setTimeout(function () {
            var elem = document.createElement('div');
            elem.id = x + "," + y;
            elem.className = "gridPosition " + (y === 0 ? 'row' : '');
            _this.containerElem.appendChild(elem);
            _this.grid[x][y] = new CellController_1.CellController(elem, x, y);
            if (x == (_this.size - 1) && y == (_this.size - 1)) {
                document.dispatchEvent(_this.fillGridDone);
            }
        }, 50);
    };
    return GridController;
}());
exports.GridController = GridController;

},{"../cell/CellController":1}],4:[function(require,module,exports){
"use strict";
var GridController_1 = require('./grid/GridController');
window.onload = function () {
    var grid = new GridController_1.GridController('grid');
    document.getElementById('inputButton').onclick = function () {
        document.getElementById('grid').innerHTML = '';
        var elem = document.createElement('div');
        elem.id = 'grid' + Math.random();
        document.getElementById('grid').appendChild(elem);
        grid = new GridController_1.GridController(elem.id);
        grid.fillGrid(function () {
            var textArea = document.getElementById('manual-input');
            var lines = textArea.value.split("\n");
            for (var _i = 0, lines_1 = lines; _i < lines_1.length; _i++) {
                var line = lines_1[_i];
                var aux = line.split(',');
                if (aux.length === 2) {
                    grid.getCell(Number(aux[0]), Number(aux[1])).lives();
                }
            }
        });
    };
    var manualTick = new CustomEvent('manual-tick');
    document.getElementById('tickButton').onclick = function () {
        document.getElementById('print-alives').innerHTML = '';
        document.getElementById('print-deads').innerHTML = '';
        grid.tick();
    };
};

},{"./grid/GridController":3}]},{},[4])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
